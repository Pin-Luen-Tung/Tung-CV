`timescale  1ns/10ps
module fa(a, b, ci, sum, cout);
// input and output declaration
input  a, b, ci;
output sum, cout;

// wire and reg declaration
 wire axb, a_and_b, axb_and_ci; // Intermediate signals

  // Sum is the XOR of a, b, and ci (a XOR b XOR ci)
  xor (axb, a, b);           // axb = a XOR b
  xor (sum, axb, ci);        // sum = axb XOR ci
  
  // Carry-out is generated by (a AND b) OR (axb AND ci)
  and (a_and_b, a, b);       // a_and_b = a AND b
  and (axb_and_ci, axb, ci); // axb_and_ci = axb AND ci
  or (cout, a_and_b, axb_and_ci); // cout = (a AND b) OR (axb AND ci)

// module instance


endmodule
